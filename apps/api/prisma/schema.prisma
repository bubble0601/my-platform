generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nestgraphql {
  provider    = "prisma-nestjs-graphql"
  output      = "../src/@generated"
  reExport    = Directories
  purgeOutput = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt     @id @default(autoincrement())
  createdAt DateTime?  @map("created_at") @db.DateTime(0)
  updatedAt DateTime?  @map("updated_at") @db.DateTime(0)
  name      String     @unique(map: "name") @db.VarChar(255)
  /// @HideField()
  password  String     @db.VarChar(255)
  songs     Song[]
  albums    Album[]
  artists   Artist[]
  playlists Playlist[]

  @@map("users")
}

model Song {
  id                BigInt           @id @default(autoincrement())
  createdAt         DateTime?        @map("created_at") @db.DateTime(0)
  updatedAt         DateTime?        @map("updated_at") @db.DateTime(0)
  userId            BigInt           @map("user_id")
  user              User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "songs_ibfk_3")
  enabled           Boolean          @default(true)
  title             String           @db.VarChar(255)
  filename          String           @db.VarChar(255)
  digest            String           @unique(map: "digest") @db.VarChar(255)
  albumId           BigInt?          @map("album_id")
  album             Album?           @relation(fields: [albumId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "songs_ibfk_2")
  artistName        String?          @map("artist_name") @db.VarChar(255)
  artistId          BigInt?          @map("artist_id")
  artist            Artist?          @relation(fields: [artistId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "songs_ibfk_1")
  year              Int?
  trackNum          Int?             @map("track_num")
  discNum           Int?             @default(1) @map("disc_num")
  hasCoverArt       Boolean          @default(false) @map("has_cover_art")
  hasLyrics         Boolean          @default(false) @map("has_lyrics")
  length            Int
  rating            Int              @default(0)
  playedCount       Int              @default(0) @map("played_count")
  syncedPlayedCount Int              @default(0) @map("synced_played_count")
  playedAt          DateTime?        @map("played_at") @db.DateTime(0)
  playlists         PlaylistsSongs[]

  @@index([albumId], map: "album_id")
  @@index([artistId], map: "artist_id")
  @@index([userId], map: "songs_user_id_index")
  @@map("songs")
}

model Album {
  id         BigInt    @id @default(autoincrement())
  createdAt  DateTime? @map("created_at") @db.DateTime(0)
  updatedAt  DateTime? @map("updated_at") @db.DateTime(0)
  userId     BigInt    @map("user_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "albums_ibfk_2")
  title      String    @db.VarChar(255)
  artistId   BigInt    @map("artist_id")
  artist     Artist    @relation(fields: [artistId], references: [id], onUpdate: Restrict, map: "albums_ibfk_1")
  year       Int?
  trackCount Int?      @map("track_count")
  discCount  Int?      @default(1) @map("disc_count")
  songs      Song[]

  @@index([userId], map: "albums_user_id_index")
  @@index([artistId], map: "artist_id")
  @@map("albums")
}

model Artist {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime? @map("created_at") @db.DateTime(0)
  updatedAt DateTime? @map("updated_at") @db.DateTime(0)
  userId    BigInt?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artists_ibfk_1")
  name      String    @db.VarChar(255)
  ruby      String?   @db.VarChar(255)
  albums    Album[]
  songs     Song[]

  @@index([userId], map: "artists_user_id_index")
  @@map("artists")
}

model Playlist {
  id        BigInt           @id @default(autoincrement())
  createdAt DateTime?        @map("created_at") @db.DateTime(0)
  updatedAt DateTime?        @map("updated_at") @db.DateTime(0)
  userId    BigInt           @map("user_id")
  user      User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_ibfk_1")
  name      String           @db.VarChar(255)
  songs     PlaylistsSongs[]

  @@index([userId], map: "playlists_user_id_index")
  @@map("playlists")
}

model PlaylistsSongs {
  playlistId BigInt   @map("playlist_id")
  songId     BigInt   @map("song_id")
  weight     Int      @default(1)
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_songs_ibfk_1")
  song       Song     @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_songs_ibfk_2")

  @@id([playlistId, songId])
  @@index([playlistId, songId], map: "playlists_songs_playlist_id_song_id_index")
  @@index([songId], map: "song_id")
  @@map("playlists_songs")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model SchemaInfo {
  version Int @default(0)

  @@map("schema_info")
  @@ignore
}
